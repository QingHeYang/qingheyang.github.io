<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清河阳</title>
  
  <subtitle>也想去山巅看翻云涌雾</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qingheyang.studio:1314/"/>
  <updated>2019-04-14T09:29:44.188Z</updated>
  <id>http://www.qingheyang.studio:1314/</id>
  
  <author>
    <name>QingHeYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客那点事，一些技术上的延伸</title>
    <link href="http://www.qingheyang.studio:1314/2019/03/12/Hexo%E5%8D%9A%E5%AE%A2%E9%82%A3%E7%82%B9%E4%BA%8B%EF%BC%8C%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E5%BB%B6%E4%BC%B8/"/>
    <id>http://www.qingheyang.studio:1314/2019/03/12/Hexo博客那点事，一些技术上的延伸/</id>
    <published>2019-03-12T09:56:00.000Z</published>
    <updated>2019-04-14T09:29:44.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2018年年初的时候我弄得hexo博客，到现在满打满算1年多，在上半年用的比较多，下半年我就销声匿迹了，很少写，这与懒不懒惰无关，是因为我自己的服务器遭受到了重创，数据全部被清空了，也就是说，我个人的服务全都挂了。<br>大概就是自己弄得文件系统、博客系统、游戏服务、还有一大堆费心写的费心编译的项目，全GG，至于为什么没有备份，因为那是我自己用旧电脑改装的服务器啊喂！！！<br>我眼前还浮现着之前美滋滋弄得漂亮的博客的样子，就是下面这个样子，我还完善了很多漂亮的主题。<br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic1.jpg" alt><br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic2.jpg" alt="mark"><br>后来因为之前把博客部署到github.io了，所以文字性的东西勉强还算能够找到，图片是废了，更别说我的tomcat服务了。<br>最后总结出来一个，ubuntu经不起突然断电的折腾，因为有一天突然停电了，我的服务器就挂了，痛定思痛，我今年决定把博客再给前捡起来，然后在做一系列的风控措施吧，虽然我也不是运维，hahahaha。  </p><hr><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>首先说一下，这篇博文主要是说一下<strong>hexo博客的延伸，需要有一定的linux基础以及会部署hexo项目的经验，最好有一些网络经验</strong>。<br>我研究了一下我要做到什么样子，才算是能让我觉得满意的博客。  </p><blockquote><ul><li>服务器：首先是在自己的服务器上面进行操作。  </li><li>Hexo主体：这块就介绍一下要安的包。</li><li>主题：这块就比较鸡肋了，一般会部署的都会切换主题。  </li><li>资源：博客的资源操作，要怎么用。  </li><li>自动化：必须能够做到能够自动generate，自动deploy，以及backup，否则一切免谈。  </li><li>网络：项目部署后，要有自己的域名，而且要ssl证书的那种。（要求太过分了，hahahaha）</li></ul></blockquote><p>上面这些是我能想到的，还有些可能没有理清的，后续再说吧。  </p><hr><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>如果你只是想部署一个hexo项目，并且只会选择github.io作为主站点，那你可以点击右上角，然后去找一找比别的教程了。<br>服务器是整个项目必备的，而且一般都是linux，可以有以下几种选择。  </p><blockquote><ul><li>云服务器：优点是可以<strong>icp，固定ip</strong>（这就很舒服了），缺点也很明显，贵啊。 </li><li>自己搭建服务器：优点，自己可控，随意造，最重要的是，随随便便的<strong>i7+16G</strong>内存，无论做什么，编译速度不是完爆1核1G1Mb了，缺点就是，这个对你网络的运营商要求比较高。还有一点是，如果你家里网可以翻墙，自己的服务器还是有些优势的。  </li></ul></blockquote><p>很明显我选择的第二种，因为考虑到性能问题（qiong），我当初做的服务器就是用旧电脑搭建的，就是下面这个。<br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic3.jpg" alt><br>还有我的运维环境，毕竟是在家里，不要在意那么多。<br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic4.jpg" alt><br>服务器系统是ubuntu server，经历过断电后，我就选择了server系统，而不用普通的ubuntu了，没有用centOS，因为对Debian这系列有好感，小版本是18.0.4。<br>安装教程可以自行百度，可以<a href="https://blog.csdn.net/zhengchaooo/article/details/80145744" target="_blank" rel="noopener">参照这个</a>。  </p><hr><h1 id="Hexo主体"><a href="#Hexo主体" class="headerlink" title="Hexo主体"></a>Hexo主体</h1><p>考虑到网络上太多的Hexo教程，以及能研究到延伸这里的，基本都是会的，不过我还是贴心的给挂上几个连接，以及一定要安装的一些包。  </p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档（免去你一会去百度了）</a></li><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes 地址，主题地址（有时候得挂一下代理）</a> </li><li><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo 插件地址</a>  </li></ul><p>其实安装的话，看官网教程就可以了，如果你会一些linux知识，当然你要会前端那就更NB了。<br>先安装npm、nodeJs、以及hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nodejs  </span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>好像是上面这样，网上教程很多的，因为太久远了，有些忘了，不过这些也不是重点。<br>插件大概有一些。<br>hexo-admin，必装，因为这个编辑真的很舒服，<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">教程点这里</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic5.png" alt>  </p><p><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic6.png" alt><br>hexo-deployer-git,必装，hexo部署到github.io的插件，<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">教程点这里</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>暂时想这么多，后续再补吧。  </p><hr><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>我感觉这块大家都明白，如果你懂一些前端知识，还是可以在人家已有的主体上面给修改一些东西的。<br>例如之前这个主题的代码字体不好看，可以去对应的主题下面，找到css文件，修改一下颜色，网页中按f12，查看具体的位置，其实我是真不太懂这块的，连蒙带侃的找到了对应的位置，修改了颜色。<br>我这个主题是<a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">Diaspora</a>，我还是觉得挺好看的。  </p><hr><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>这个资源怎么说呢，主要就是图片，音频，因为曾经博客丢失过，所以我就决定，弃用hexo自带的assert资源文件夹了，这个文件夹是文章对应的图片文件夹。<br>这个主要是要是整个项目丢了，那简直是灾难，所以我决定图片内文章全用图床形式，网络图片。<br>图床有几种选择：  </p><blockquote><ul><li>七牛  </li><li>存储桶  </li><li>github  </li><li>自建http服务器。  </li></ul></blockquote><p>很明显，我也选择的最后一种，大概是程序员的执拗，我一向喜欢用自己的服务器。<br>其实我也纠结了很久哪个更好点，毕竟除了自建服务器，其余的都是https协议（后面解释原因），也不花钱，但是我还是太懒了，hahahaha。<br>最后我选择了自己搭建nginx服务器，因为以前做ffmpge用到过，比tomcat更符合我的风格。<br>话不多说，先安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p><p>然后配置，此处需要权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure></p><p>然后配置静态路径，具体内容需要修改为自己想开方的路径以及端口号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 ipv6only=on default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;  </span><br><span class="line">                root /home/qingheyang/share/;</span><br><span class="line">                autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后开启 or 重启：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -S reload</span><br></pre></td></tr></table></figure></p><p>如果你最后在浏览器输入你自己的ip或者域名，加nginx监听的端口号，能看到下面结果，说明成功了。<br><img src="http://www.qingheyang.studio:8000/blog_image/2019-03-12/pic7.png" alt><br>然后就可以在文章中引用了，需要注意的是，这些图片不能丢失，否则文章中图就挂了。<br>当然，这仅仅是我的选择，其实github，或者七牛都是不错的选择。毕竟稳定，不收费。  </p><hr><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><p>无论何时，其实都可以考虑自动化，除去不长期开着项目的，只往github上更新的童鞋。  </p><h2 id="一键上传博客"><a href="#一键上传博客" class="headerlink" title="一键上传博客"></a>一键上传博客</h2><p>我在去年的一篇文章里写了怎么用expect做到一键更新项目到github.io上去，再贴一下脚本吧。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本里的用户名密码都需要修改</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="built_in">set</span> gitUser QingHeYang</span><br><span class="line"><span class="built_in">set</span> gitPsw *******</span><br><span class="line"><span class="built_in">set</span> userPsw *******</span><br><span class="line"></span><br><span class="line">spawn ssh qingheyang@localhost</span><br><span class="line">expect <span class="string">"password:"</span> &#123;send <span class="string">"<span class="variable">$userPsw</span>\r"</span>&#125;</span><br><span class="line">expect <span class="string">"qingheyang@*"</span>  &#123;send <span class="string">"cd /home/qingheyang/Hexo/QHY_Blog2\r"</span>&#125;</span><br><span class="line">expect <span class="string">"qingheyang@*"</span>  &#123;send <span class="string">"hexo g\r"</span>&#125;</span><br><span class="line">expect <span class="string">"qingheyang@*"</span>  &#123;send <span class="string">"hexo d\r"</span>&#125;</span><br><span class="line">expect <span class="string">"*Username*"</span>  &#123;send <span class="string">"<span class="variable">$gitUser</span>\r"</span>&#125;</span><br><span class="line">expect <span class="string">"*Password*"</span>  &#123;send <span class="string">"<span class="variable">$gitPsw</span>\r"</span>&#125;</span><br><span class="line"></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><p>编辑完后，记得：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 脚本.sh u+x</span><br></pre></td></tr></table></figure></p><p>然后执行一下，你会发现，系统自动登陆，然后给你自动输入密码然后把项目deploy到github.io上去了。<br>这个有前提的，一定要配置hexo-deployer-git。  </p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>计划任务主要是要做备份用，将整个项目以及网络资源还有服务器的部分内容，按时给备份到某一处去。  </p><p>暂时停一下，后面在写，还没实现。  </p><hr><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>这个可以重点说一下，因为这块涉及到域名、端口号、ssl证书等一系列的问题。  </p><h2 id="服务器网络"><a href="#服务器网络" class="headerlink" title="服务器网络"></a>服务器网络</h2><p>自建服务器有个很大的缺点，就是非固定ip，甚至有可能是非公网ip。<br>这就涉及到很严重的问题，如果非公网ip，就意味着你的博客外网访问不到，因为网络是一层套一层的，你的服务器链接你的路由器，你的路由器连接着外网，这是必备条件。<br>如果你的运营商可以提供公网ip，但是你查询到的ip不是公网ip，那就需要你做一些措施了。<br>具体怎么查询呢，首先你需要连接上自己的wifi，然后百度一下，ip，然后看一下结果。  </p><hr><p>  未完待续….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2018年年初的时候我弄得hexo博客，到现在满打满算1年多，在上半年用的比较多，下半年我就销声匿迹了，很少写，这与懒不懒惰无关，是因为我自
      
    
    </summary>
    
      <category term="综合技术" scheme="http://www.qingheyang.studio:1314/categories/%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://www.qingheyang.studio:1314/tags/linux/"/>
    
      <category term="hexo" scheme="http://www.qingheyang.studio:1314/tags/hexo/"/>
    
      <category term="nginx" scheme="http://www.qingheyang.studio:1314/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>关于互联网技术</title>
    <link href="http://www.qingheyang.studio:1314/2018/12/04/%E5%85%B3%E4%BA%8E%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.qingheyang.studio:1314/2018/12/04/关于互联网技术/</id>
    <published>2018-12-04T09:38:00.000Z</published>
    <updated>2019-04-11T01:38:54.746Z</updated>
    
    <content type="html"><![CDATA[<p>互联网技术  </p><ol><li>前端：android\ios，react，jsp，vue。</li><li>后端：java js .net C#。</li><li>dba：mysql oracle mangodb。  </li><li>运维：windows server 、 linux 、 tomcat 、Apache 、nginx、docker。</li><li>new tech. : hadoop、tensorflow、caffe。</li><li>混合：react native 、pwa。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;互联网技术  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端：android\ios，react，jsp，vue。&lt;/li&gt;
&lt;li&gt;后端：java js .net C#。&lt;/li&gt;
&lt;li&gt;dba：mysql oracle mangodb。  &lt;/li&gt;
&lt;li&gt;运维：windows 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于机器学习的一些想法(持续更新中)</title>
    <link href="http://www.qingheyang.studio:1314/2018/05/23/Untitled/"/>
    <id>http://www.qingheyang.studio:1314/2018/05/23/Untitled/</id>
    <published>2018-05-23T09:43:00.000Z</published>
    <updated>2019-04-11T01:38:54.746Z</updated>
    
    <content type="html"><![CDATA[<p>我现在的情况是处在半迷茫阶段了。<br>我已经24了，今年结的婚，算是结婚尚早的。<br>不提个人生活，我在工作上面也存在很大的迷茫，不知道该往哪个方向走。<br>前段日子定下了走人工智能，这算是我自主学习的半年来定下的结果吧。  </p><hr><p>现在在学习人工智能，罗列一下现在掌握的信息：  </p><ul><li>人工智能的本质是模型。  </li><li>模型有很多，需要自己来通过高等数学来编写。  </li><li>框架是tensorflow，或者caffe。  </li><li>tensorflow需要用到的是python。  </li><li>目前刚刚学习了决策树。  </li><li>损失函数、激活函数。  </li><li>卷积CNN原理，降维、反向传播、共享权值、纹理。  </li></ul><p>其实想学人工智能这个方面也跟我小时候的执念有关，哪个孩子心底不存在一个人工智能的梦啊。<br>既然父母把我放出来了，我就不想着去做生意了，我要选择的不是一个三流的执行工程师，而是一个真正的工程师。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我现在的情况是处在半迷茫阶段了。&lt;br&gt;我已经24了，今年结的婚，算是结婚尚早的。&lt;br&gt;不提个人生活，我在工作上面也存在很大的迷茫，不知道该往哪个方向走。&lt;br&gt;前段日子定下了走人工智能，这算是我自主学习的半年来定下的结果吧。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;现在在学习人工智
      
    
    </summary>
    
      <category term="New Life" scheme="http://www.qingheyang.studio:1314/categories/New-Life/"/>
    
    
      <category term="生活" scheme="http://www.qingheyang.studio:1314/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="AI" scheme="http://www.qingheyang.studio:1314/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>为Mac打造一个顺手的链接Linux工具</title>
    <link href="http://www.qingheyang.studio:1314/2018/03/15/%E4%B8%BAMac%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E9%A1%BA%E6%89%8B%E7%9A%84%E9%93%BE%E6%8E%A5Linux%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.qingheyang.studio:1314/2018/03/15/为Mac打造一个顺手的链接Linux工具/</id>
    <published>2018-03-15T08:19:00.000Z</published>
    <updated>2019-04-12T03:36:03.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Mac的话也买了有一段时间，2017款的，作为一个Android程序员，虽然买苹果的本子会让人觉得有种投敌的感觉，但是不得不说，真的实在是太好用了。<br>作为一个Android程序员，怎么能离开Linux呢？无论是NDK还是.so库的编译，再到ffmpeg，都需要用到Linux。<br>因为朋友的关系，我对Linux还算比较熟悉，能够使用基本的命令，cd ，ls -al，htop这些命令就不说了，makefile也写过部分，脚本也写过一部分，不过应用场景较少罢了。<br>那么问题就来了，与Linux同源的Mac OS会不会对Linux开发有着更好的支持。<br><a id="more"></a>   </p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Linux服务器：Ubuntu 16.04</li><li>服务器：用的机器是一台老联想，8G内存，i5cpu，256 SSD</li><li>域名：<a href="http://www.shouwangzhe.space" target="_blank" rel="noopener">www.shouwangzhe.space</a> (大佬不要攻击我,现在已经更换了)</li><li>MacBookPro: Mac OS</li><li>工具:Shuttle<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic1.png" alt="mark"><br>解释一下为什么不用阿里云：之所以没有选择阿里云服务器，主要因为是觉得没必要，1Mb的速度，1G内存，1核cpu，一个月100多，何必呢？  </li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>效果基本是很傻瓜的一种方式，顶部的图标点击后，选择哪个操作，选择登陆远程服务器:<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic2.png" alt="mark"><br>然后就会蹦出控制台的窗口:<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic3.png" alt="mark"><br>然后我们就能愉快的ls了。<br>或许你觉得这个有什么意思，用命令不还是能解决吗，打开控制台，输入：  </p><pre><code>ssh -p 22 xxx@www.域名.com#输入密码</code></pre><p>不一样能进去吗？<br>如果遇到复杂问题，例如你想把自己的hexo博客推送到githup.io上去呢。  </p><pre><code class="bash"><span class="comment">#首先要</span>xxx@Lenovo-IdeaPad-Y480:~$ <span class="built_in">cd</span> /hexo<span class="comment">#然后1</span>xxx@Lenovo-IdeaPad-Y480:~/hexo$ hexo g<span class="comment">#然后2</span>xxx@Lenovo-IdeaPad-Y480:~/hexo$ hexo d<span class="comment">#然后3 输入你git的本地密码</span>Enter passphrase <span class="keyword">for</span> key <span class="string">'/home/star/.ssh/id_rsa'</span>: xxxxxx<span class="comment">#推送成功</span></code></pre><p>所以我觉得自动化还是挺重要的,点击一下，一步到位。  </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现的方式也是，会的不难，难的不会，基本是由两部分组成，Linux的expact命令，以及Shuttle。  </p><h2 id="Shuttle"><a href="#Shuttle" class="headerlink" title="Shuttle"></a>Shuttle</h2><p>Shuttle 是一款图形界面化的cmd命令工具。<br>下载完后点击图标，就可以在顶部的导航栏找到他了，至于怎么用，点击这个按钮:<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic4.png" alt="mark"><br>会打开一个文档，json格式的，也就是软件的配置文件(缩进好像有点问题)：  </p><pre><code class="json">{    <span class="attr">"_comments"</span>: [],    <span class="attr">"editor"</span>: <span class="string">"default"</span>,    <span class="attr">"launch_at_login"</span>: <span class="literal">false</span>,    <span class="attr">"terminal"</span>: <span class="string">"Terminal.app"</span>,    <span class="attr">"iTerm_version"</span>: <span class="string">"nightly"</span>,    <span class="attr">"default_theme"</span>: <span class="string">"Ocean"</span>,    <span class="attr">"open_in"</span>: <span class="string">"new"</span>,    <span class="attr">"show_ssh_config_hosts"</span>: <span class="literal">false</span>,    <span class="attr">"ssh_config_ignore_hosts"</span>: [],    <span class="attr">"ssh_config_ignore_keywords"</span>: [],    <span class="attr">"hosts"</span>: [        {            <span class="attr">"linux Servers"</span>: [                {                    <span class="attr">"QHY’s linux Servers"</span>: [                        {                            <span class="attr">"cmd"</span>: <span class="string">".//linux自动脚本/login.sh"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"login"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Ocean"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe"</span>                        }                    ]                },                {                    <span class="attr">"博客运维脚本"</span>: [                        {                            <span class="attr">"cmd"</span>: <span class="string">".//linux自动脚本/starHexoBlog.sh"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"长时启动博客服务器"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Ocean"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe"</span>                        },                        {                            <span class="attr">"cmd"</span>: <span class="string">".//linux自动脚本/starHexoBlog-RealTime.sh"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"实时启动博客服务器"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Ocean"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe"</span>                        },                        {                            <span class="attr">"cmd"</span>: <span class="string">".//linux自动脚本/endHexoBlog.sh"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"关闭博客服务器"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Ocean"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe"</span>                        }                    ]                }            ]        },        {            <span class="attr">"Android adb Servers"</span>: [                {                    <span class="attr">"QHY’s Home adb Servers"</span>: [                        {                            <span class="attr">"cmd"</span>: <span class="string">"adb connect 192.168.10.211:5555\r exit\r"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"connect home onplus 2 test"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Homebrew"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe 1+"</span>                        },                        {                            <span class="attr">"cmd"</span>: <span class="string">"adb disconnect 192.168.10.211:5555\r exit\r"</span>,                            <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,                            <span class="attr">"name"</span>: <span class="string">"disconnect home onplus 2"</span>,                            <span class="attr">"theme"</span>: <span class="string">"Homebrew"</span>,                            <span class="attr">"title"</span>: <span class="string">"ShouWangZhe 1+"</span>                        }                    ]                }            ]        }    ]}</code></pre><p>上面的是我的配置，解析一下这个json：<br>{<img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic5.png" alt="mark"><br>也就是对应我的效果那节的那个图，配置文件中的host节点是我们要用到的节点，有点编程基础的也知道这个节点是一个JsonArray。<br>下面可以加很多节点，每一个节点都是一级菜单，大体目录就这么多，每个节点的配置如下：  </p><pre><code class="json">{  <span class="attr">"cmd"</span>: <span class="string">".//linux自动脚本/login.sh"</span>,  <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,  <span class="attr">"name"</span>: <span class="string">"login"</span>,  <span class="attr">"theme"</span>: <span class="string">"Ocean"</span>,  <span class="attr">"title"</span>: <span class="string">"ShouWangZhe"</span>}</code></pre><ul><li>cmd：你要在打开的控制台里面输入什么命令。</li><li>name：标题。</li><li>theme：Mac控制台主题，我选的是Ocean。</li><li>title：Mac控制台标题。  </li></ul><p>我是一个android工程师，所以偶尔也需要wifi ADB操作，同样可以写在配置里面：  </p><pre><code class="json">{  <span class="attr">"cmd"</span>: <span class="string">"adb connect 192.168.10.211:5555\r exit\r"</span>,  <span class="attr">"inTerminal"</span>: <span class="string">"tab"</span>,  <span class="attr">"name"</span>: <span class="string">"connect home onplus 2 test"</span>,  <span class="attr">"theme"</span>: <span class="string">"Homebrew"</span>,  <span class="attr">"title"</span>: <span class="string">"ShouWangZhe 1+"</span>}</code></pre><p>效果就是这样的：<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic7.png" alt="mark"><br>以上大体就是Shuttle的应用，它就是读取cmd节点的命令，然后执行。  </p><h2 id="expact"><a href="#expact" class="headerlink" title="expact"></a>expact</h2><p>很明显，上面的命令我输入了执行脚本的命令。  </p><pre><code class="bash">.//linux自动脚本/login.sh</code></pre><p>我在Mac目录下面建立了“linux自动脚本”这个文件夹，专门用来存放我的脚本。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic6.png" alt="mark"><br>例如想要登陆远程服务器的脚本(login.sh)内容如下：  </p><pre><code class="bash"><span class="comment">#!/usr/bin/expect -f</span><span class="built_in">set</span> psw 123456spawn ssh  -p 22 root@www.shouwangzhe.spaceexpect {        <span class="string">"(yes/no)"</span> {send <span class="string">"yes\r"</span>; exp_continue}        <span class="string">"password:"</span> {send <span class="string">"<span class="variable">$psw</span>\r"</span>}}expect eofinteract</code></pre><p>语法是expect，自动化运维脚本，他的原理是在当前控制台开设一个新的控制台，然后监测命令行是否有你需要的命令，有的话就send一行命令+‘\r’，执行。  </p><p>用expact还可以完成很多复杂的操作，例如推送博客到GitHub上去：  </p><pre><code class="bash"><span class="comment">#!/usr/bin/expect -f</span><span class="built_in">set</span> gitPsw 123456<span class="built_in">set</span> userPsw 123456spawn ssh root@localhostexpect {        <span class="string">"(yes/no)"</span> {send <span class="string">"yes\r"</span>; exp_continue}        <span class="string">"password:"</span> {send <span class="string">"<span class="variable">$userPsw</span>\r"</span>}}expect <span class="string">"root@*"</span>  {send <span class="string">"cd /home/root/hexo\r"</span>}expect <span class="string">"root@*"</span>  {send <span class="string">"hexo g\r"</span>}expect <span class="string">"root@*"</span>  {send <span class="string">"hexo d\r"</span>}expect <span class="string">"*passphrase*"</span>  {send <span class="string">"<span class="variable">$gitPsw</span>\r"</span>}expect eof<span class="built_in">exit</span> 0</code></pre><p>效果就不展示了，就是省去了上传博客的过程，一步到位，有了这个技巧，就可以做很多方便的功能，也算是做到了优雅的开发了。  </p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>弄这套花了我一天的时间，摸索起来还是很费劲的，好在效果很好。<br>最后，京紫镇楼。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-03-15/pic8.jpg" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Mac的话也买了有一段时间，2017款的，作为一个Android程序员，虽然买苹果的本子会让人觉得有种投敌的感觉，但是不得不说，真的实在是太好用了。&lt;br&gt;作为一个Android程序员，怎么能离开Linux呢？无论是NDK还是.so库的编译，再到ffmpeg，都需要用到Linux。&lt;br&gt;因为朋友的关系，我对Linux还算比较熟悉，能够使用基本的命令，cd ，ls -al，htop这些命令就不说了，makefile也写过部分，脚本也写过一部分，不过应用场景较少罢了。&lt;br&gt;那么问题就来了，与Linux同源的Mac OS会不会对Linux开发有着更好的支持。&lt;br&gt;
    
    </summary>
    
      <category term="Utils" scheme="http://www.qingheyang.studio:1314/categories/Utils/"/>
    
    
      <category term="Linux" scheme="http://www.qingheyang.studio:1314/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2关于Junit的错误解决方法</title>
    <link href="http://www.qingheyang.studio:1314/2018/02/07/RxJava2%E5%85%B3%E4%BA%8EJunit%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://www.qingheyang.studio:1314/2018/02/07/RxJava2关于Junit的错误解决方法/</id>
    <published>2018-02-07T05:20:00.000Z</published>
    <updated>2019-04-12T03:38:52.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这段时间做的项目用到了RxJava2，整体框架为MVP。<br>因为我公司的电脑差的厉害，没有硬件加速，项目环境起步就是5.0，所以只能用真机调试，公司的测试机比电脑还差，慢的要死，种种问题的压迫。<br>我一拍脑门，决定Junit来进行测试我的P层逻辑，反正数据这种东西，测试通的过,到真机上面基本也就是刷新视图界面的问题了。  </p><hr><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在整体coding的过程中还是遇到了部分棘手的问题，因为以往很少用Junit，应该说从来没有用过，所以踩了很多坑，我遇到的问题是在单元测试的过程中，无法用Rxjava2进行测试，而我MVP的主要核心就是Rxjava2，本文也主要是解决这个问题。<br><a id="more"></a>  </p><hr><h1 id="Rxjava2-amp-Junit-引入"><a href="#Rxjava2-amp-Junit-引入" class="headerlink" title="Rxjava2 &amp; Junit 引入"></a>Rxjava2 &amp; Junit 引入</h1><h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><pre><code class="Gradle"><span class="keyword">dependencies</span> {    ...    testImplementation <span class="string">'junit:junit:4.12'</span>      implementation <span class="string">'io.reactivex.rxjava2:rxjava:2.0.4'</span>      implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span>      implementation <span class="string">'com.google.code.gson:gson:2.8.2'</span>  }</code></pre><p>注：因为我用的gradle版本比较高，所以‘compile’ 被 ‘implementation’取代了。junit应该是自带的，所以也可以不用引入。  </p><h2 id="Rxjava2-amp-Presenter"><a href="#Rxjava2-amp-Presenter" class="headerlink" title="Rxjava2 &amp; Presenter"></a>Rxjava2 &amp; Presenter</h2><p>一个Rxjava的例子,因为我的项目是以MVP为基础的，所以这个demo也是以MVP为基础的，没有MVP基础的可以先去学一下，项目是简化了很多版的MVP框架。<br>我先将我整个Demo给贴上，在叙述具体的问题解决方式。  </p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic1.png" alt="mark">  </p><h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>在Presenter层编写获取信息的代码，处理数据层信息，将结果反馈给视图层，以下是我Presenter层的代码:  </p><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="comment">//省略包</span><span class="keyword">import</span> ...;<span class="comment">/**</span><span class="comment"> * project: TestJR</span><span class="comment"> * package: com.qingheyang.testjr</span><span class="comment"> * creater: qingheyang</span><span class="comment"> * date: 2018/2/17</span><span class="comment"> * describe:</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> </span>{    MainActivity activity;    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainActivity activity)</span> </span>{        <span class="keyword">this</span>.activity = activity;    }    <span class="comment">/**</span><span class="comment">     * 获取user信息</span><span class="comment">     */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(<span class="keyword">final</span> String path)</span> </span>{        Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>{                String json = HttpUtils.httpGet(path);<span class="comment">//请求网络</span>                <span class="keyword">if</span> (json!=<span class="keyword">null</span>) {<span class="comment">//判断服务器返回数据是否为空</span>                    e.onNext(json);                }<span class="keyword">else</span> {                    e.onError(<span class="keyword">new</span> Exception(<span class="string">"获取user失败"</span>));                }            }        }).subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() {                    <span class="meta">@Override</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>{                    }                    <span class="meta">@Override</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>{                        System.out.println(s);<span class="comment">//因为junit输出日志不能用log，所以改用sys。</span>                        Gson gson = <span class="keyword">new</span> Gson();                        User user = gson.fromJson(s, User.class);                        <span class="comment">//处理数据成功的话，交给activity的回调</span>                        activity.getDateSuccess(user);                    }                    <span class="meta">@Override</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>{                        <span class="comment">//失败交给activity给用户返回失败信息</span>                        activity.getDateFailed(<span class="number">0x001</span>);                    }                    <span class="meta">@Override</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{                    }                });    }}</code></pre><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="comment">//省略包</span><span class="keyword">import</span> ...;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{    <span class="keyword">private</span> Button button;    <span class="keyword">private</span> MainPresenter presenter;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{        <span class="keyword">super</span>.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        initUi();    }    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUi</span><span class="params">()</span> </span>{        button = findViewById(R.id.main_btn);        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{                presenter.getUser(HttpUtils.URL);<span class="comment">//地址要自己更换</span>            }        });    }    <span class="comment">/**</span><span class="comment">     * 成功的回调</span><span class="comment">     * <span class="doctag">@param</span> user</span><span class="comment">     */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDateSuccess</span><span class="params">(User user)</span></span>{        <span class="comment">//doSomethings...</span>    }    <span class="comment">/**</span><span class="comment">     * 失败的回调</span><span class="comment">     * <span class="doctag">@param</span> code</span><span class="comment">     */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDateFailed</span><span class="params">(<span class="keyword">int</span> code)</span></span>{        <span class="keyword">switch</span> (code){            <span class="keyword">case</span> <span class="number">0x001</span>:                Toast.makeText(<span class="keyword">this</span>, <span class="string">"获取信息失败"</span>, Toast.LENGTH_SHORT).show();                <span class="keyword">break</span>;            <span class="keyword">case</span> <span class="number">0x002</span>:                <span class="keyword">break</span>;        }    }}</code></pre><h3 id="HttpUtils"><a href="#HttpUtils" class="headerlink" title="HttpUtils"></a>HttpUtils</h3><p>工具类，因为是demo，获取方式为GET请求：  </p><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="comment">//省略包</span><span class="keyword">import</span> ...;<span class="comment">/**</span><span class="comment"> * project: TestJR</span><span class="comment"> * package: com.qingheyang.testjr</span><span class="comment"> * creater: qingheyang</span><span class="comment"> * date: 2018/2/17</span><span class="comment"> * describe:http get请求</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>{    <span class="comment">//此处更换ip地址</span>    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"http://192.168.1.1:8080"</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGet</span><span class="params">(String path)</span> </span>{        URL url = <span class="keyword">null</span>;        HttpURLConnection conn = <span class="keyword">null</span>;        InputStream is = <span class="keyword">null</span>;        ByteArrayOutputStream baos = <span class="keyword">null</span>;        <span class="keyword">try</span> {            url = <span class="keyword">new</span> URL(path);        } <span class="keyword">catch</span> (MalformedURLException e) {            e.printStackTrace();        }        <span class="keyword">if</span> (url != <span class="keyword">null</span>) {            <span class="keyword">try</span> {                conn = (HttpURLConnection) url.openConnection();                conn.setRequestMethod(<span class="string">"GET"</span>);                conn.setReadTimeout(<span class="number">8000</span>);                conn.setConnectTimeout(<span class="number">8000</span>);                conn.connect();                <span class="keyword">int</span> responseCode = conn.getResponseCode();                <span class="keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) {                    is = conn.getInputStream();                    baos = <span class="keyword">new</span> ByteArrayOutputStream();                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];                    <span class="keyword">int</span> len = <span class="number">0</span>;                    <span class="keyword">while</span> (-<span class="number">1</span> != (len = is.read(buffer))) {                        baos.write(buffer, <span class="number">0</span>, len);                        baos.flush();                    }                    is.close();                    baos.close();                    <span class="keyword">return</span> baos.toString(<span class="string">"utf-8"</span>);                }            } <span class="keyword">catch</span> (IOException e) {                e.printStackTrace();            } <span class="keyword">finally</span> {                <span class="keyword">if</span> (is != <span class="keyword">null</span>) {                    <span class="keyword">try</span> {                        is.close();                    } <span class="keyword">catch</span> (IOException e) {                        e.printStackTrace();                    }                }                <span class="keyword">if</span> (baos != <span class="keyword">null</span>) {                    <span class="keyword">try</span> {                        baos.close();                    } <span class="keyword">catch</span> (IOException e) {                        e.printStackTrace();                    }                }                conn.disconnect();            }        }        <span class="keyword">return</span> <span class="keyword">null</span>;    }}</code></pre><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>javaBean:  </p><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="keyword">import</span> java.util.List;<span class="comment">/**</span><span class="comment"> * project: TestJR</span><span class="comment"> * package: com.qingheyang.testjr</span><span class="comment"> * creater: qingheyang</span><span class="comment"> * date: 2018/2/17</span><span class="comment"> * describe: javaBean</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{    <span class="keyword">private</span> List&lt;MessageInfoBean&gt; messageInfo;    <span class="function"><span class="keyword">public</span> List&lt;MessageInfoBean&gt; <span class="title">getMessageInfo</span><span class="params">()</span> </span>{        <span class="keyword">return</span> messageInfo;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageInfo</span><span class="params">(List&lt;MessageInfoBean&gt; messageInfo)</span> </span>{        <span class="keyword">this</span>.messageInfo = messageInfo;    }    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageInfoBean</span> </span>{        <span class="keyword">private</span> String msg1;        <span class="keyword">private</span> String author;        <span class="keyword">private</span> String view;        <span class="function"><span class="keyword">public</span> String <span class="title">getMsg1</span><span class="params">()</span> </span>{            <span class="keyword">return</span> msg1;        }        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg1</span><span class="params">(String msg1)</span> </span>{            <span class="keyword">this</span>.msg1 = msg1;        }        <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>{            <span class="keyword">return</span> author;        }        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>{            <span class="keyword">this</span>.author = author;        }        <span class="function"><span class="keyword">public</span> String <span class="title">getView</span><span class="params">()</span> </span>{            <span class="keyword">return</span> view;        }        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(String view)</span> </span>{            <span class="keyword">this</span>.view = view;        }    }}</code></pre><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><ul><li>如果你已经依赖了Junit了，请继续往下看，没有的话，我上面已经附上了依赖。</li><li>新建一个Presenter的单元测试类。<br>在要测试的方法上面点击右键，选择goto，选择最后一个test。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic2.png" alt="mark"><br>点击后出现Create New Test，点击。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic3.png" alt="mark"><br>出现Create Test的对话框，勾选setUp，tearDown，以及你想测试的方法，getUser，点击OK。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic4.png" alt="mark"><br>左边的列表中会出现刚才建立的MainPresenter。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic5.png" alt="mark">  </li><li>test代码  </li></ul><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="keyword">import</span> org.junit.After;<span class="keyword">import</span> org.junit.Before;<span class="keyword">import</span> org.junit.Test;<span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;<span class="comment">/**</span><span class="comment"> * project: TestJR</span><span class="comment"> * package: com.qingheyang.testjr</span><span class="comment"> * creater: qingheyang</span><span class="comment"> * date: 2018/2/18</span><span class="comment"> * describe:MainPresenter的单元测试</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenterTest</span> </span>{    <span class="keyword">private</span> MainPresenter presenter;    <span class="meta">@Before</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{        presenter = <span class="keyword">new</span> MainPresenter();    }    <span class="meta">@After</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{        presenter = <span class="keyword">null</span>;    }    <span class="meta">@Test</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>{        presenter.getUser(HttpUtils.URL);    }}</code></pre><p>以上就是rxjava+MVP的全部代码。<br>当然这样肯定会出错的。<br>顺便说一下，服务器搭建是Linux平台上面随便启动的一个tomcat服务器。  </p><hr><h1 id="Run-amp-Error"><a href="#Run-amp-Error" class="headerlink" title="Run &amp; Error"></a>Run &amp; Error</h1><p>运行一下，单元测试的运行是在方法上面运行：<br>可以点击左边的运行按钮，也可以对方法点击右键。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic7.png" alt="mark"><br>运行过后会发现报错，原因一是因为部分Android的API，Junit不支持，没法做到完美支持，会报错。<br>解决方法有两个。  </p><ul><li>依赖mock。</li><li>注释掉关于Android的代码。（我选择注释）<br>也就是Rxjava中观察者中的onNext方法中关于Android的部分代码要注释。  <pre><code class="Java"><span class="meta">@Override</span>                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>{                      System.out.println(s);<span class="comment">//因为junit输出日志不能用log，所以改用sys。</span>                      <span class="comment">//Gson gson = new Gson();</span>                     <span class="comment">// User user = gson.fromJson(s, User.class);</span>                      <span class="comment">//处理数据成功的话，交给activity的回调</span>                      <span class="comment">//activity.getDateSuccess(user);</span>                  }</code></pre></li></ul><p>再次运行。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic8.png" alt="mark"><br>再次发现错误，也是我遇到的核心问题：Rxjava2在Junit中的线程问题，以及如何用API来解决它。  </p><hr><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>这个问题粗略的说一下其实也很简单，就是Rxjava2的子线程与主线程在电脑上面运行无法同步的问题。<br>解决方法就是将子线程与安卓UI线程调整至同一线程即可。<br>也搜索过很多网上的解决方法，基本都是Rxjava1的解决方法，Rxjava2的又一般是kotlin，直接上代码吧。  </p><pre><code class="Java"><span class="keyword">package</span> com.qingheyang.testjr;<span class="comment">//省略包</span><span class="keyword">import</span> ...;<span class="comment">/**</span><span class="comment"> * 项目名称:</span><span class="comment"> * 类创建者:QHY.</span><span class="comment"> * 时间:2017/12/21</span><span class="comment"> * 类说明:</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxTools</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">asyncToSync</span><span class="params">()</span> </span>{        <span class="comment">/**</span><span class="comment">         * 因为RxJava2已经没有了immediate线程，所以要自己做一个线</span><span class="comment">         */</span>        <span class="keyword">final</span> Scheduler immediate = <span class="keyword">new</span> Scheduler() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> Disposable <span class="title">scheduleDirect</span><span class="params">(@NonNull Runnable run, <span class="keyword">long</span> delay, @NonNull TimeUnit unit)</span> </span>{                <span class="keyword">return</span> <span class="keyword">super</span>.scheduleDirect(run, <span class="number">0</span>, unit);            }            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> Worker <span class="title">createWorker</span><span class="params">()</span> </span>{                <span class="keyword">return</span> <span class="keyword">new</span> ExecutorScheduler.ExecutorWorker(<span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>) {                    <span class="meta">@Override</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(@NonNull Runnable runnable)</span> </span>{                        runnable.run();                    }                });            }        };        <span class="comment">/**</span><span class="comment">         * 将自己写的线程转换成为一个调度线程</span><span class="comment">         */</span>        Function&lt;Callable&lt;Scheduler&gt;, Scheduler&gt; schedulerFunc = <span class="keyword">new</span> Function&lt;Callable&lt;Scheduler&gt;, Scheduler&gt;() {            <span class="meta">@Override</span>            <span class="function"><span class="keyword">public</span> Scheduler <span class="title">apply</span><span class="params">(Callable&lt;Scheduler&gt; schedulerCallable)</span> <span class="keyword">throws</span> Exception </span>{                <span class="keyword">return</span> immediate;            }        };        <span class="comment">/**</span><span class="comment">         * 将单元测试的所有调度线程都统一一个线程</span><span class="comment">         */</span>        RxJavaPlugins.reset();        RxJavaPlugins.setInitIoSchedulerHandler(schedulerFunc);        RxJavaPlugins.setInitComputationSchedulerHandler(schedulerFunc);        RxJavaPlugins.setInitNewThreadSchedulerHandler(schedulerFunc);        RxAndroidPlugins.reset();        RxAndroidPlugins.setInitMainThreadSchedulerHandler(schedulerFunc);    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetPlugins</span><span class="params">()</span></span>{        RxJavaPlugins.reset();        RxAndroidPlugins.reset();    }}</code></pre><p>使用方法很简单，如下：  </p><pre><code class="Java"><span class="meta">@Before</span>   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{       RxTools.asyncToSync();       presenter = <span class="keyword">new</span> MainPresenter();   }   <span class="meta">@After</span>   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{       RxTools.resetPlugins();       presenter = <span class="keyword">null</span>;   }</code></pre><p>在MainPresenterTest中，setUp以及tearDown中分别调整下代码即可。<br>结果如下:<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-02-07/pic9.png" alt="mark">  </p><hr><p>这个项目也可以在我的github中找到，如果有帮到你，欢迎给一个star。<br>链接可以在主页GitHub图标获取。<br>以上</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;这段时间做的项目用到了RxJava2，整体框架为MVP。&lt;br&gt;因为我公司的电脑差的厉害，没有硬件加速，项目环境起步就是5.0，所以只能用真机调试，公司的测试机比电脑还差，慢的要死，种种问题的压迫。&lt;br&gt;我一拍脑门，决定Junit来进行测试我的P层逻辑，反正数据这种东西，测试通的过,到真机上面基本也就是刷新视图界面的问题了。  &lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在整体coding的过程中还是遇到了部分棘手的问题，因为以往很少用Junit，应该说从来没有用过，所以踩了很多坑，我遇到的问题是在单元测试的过程中，无法用Rxjava2进行测试，而我MVP的主要核心就是Rxjava2，本文也主要是解决这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://www.qingheyang.studio:1314/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="Android" scheme="http://www.qingheyang.studio:1314/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>穿过一座京城来看你</title>
    <link href="http://www.qingheyang.studio:1314/2018/01/04/%E7%A9%BF%E8%BF%87%E4%B8%80%E5%BA%A7%E4%BA%AC%E5%9F%8E%E6%9D%A5%E7%9C%8B%E4%BD%A0/"/>
    <id>http://www.qingheyang.studio:1314/2018/01/04/穿过一座京城来看你/</id>
    <published>2018-01-03T21:24:00.000Z</published>
    <updated>2019-04-12T03:41:35.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="穿过一座京城来看你"><a href="#穿过一座京城来看你" class="headerlink" title="穿过一座京城来看你"></a>穿过一座京城来看你</h1><hr><p>&emsp;&emsp;  一直想把那封信给你写完，却总是有各种各样的事情阻挡着，后来发现了，阻挡的事情叫做懒。<br>&emsp;&emsp;  时光飞快，这已经是我们在一起的第五个年头了，1825个日日夜夜，截至到我写这个文字为止，<br>是我们在一起第 1825 天 02 小时 38 分钟 39 秒。<br>&emsp;&emsp;  So..该从哪里说起呢？<br><a id="more"></a></p><h2 id="烟花三月去哪里"><a href="#烟花三月去哪里" class="headerlink" title="烟花三月去哪里"></a>烟花三月去哪里</h2><p>&emsp;&emsp;  适逢16年的春天，正值毕业之际。那时候找工作不顺利的我，不知道将来该怎么发展的我，面对我们的爱情，更是觉得希望渺茫，当时也许不想认命的我真的认了命，觉得我们不合适，觉得我们在一起的结果是错误的,可能我会后悔一辈子。<br>&emsp;&emsp;  也许我会回家做做小生意，你呢，做一个小公务员吗？这些那时候我都想过。<br>&emsp;&emsp;  当然，结果也不是那么写的，那时候虽然我们都对未来很没有信心，可是怎么会难得倒两个有识青年的思想呢。<br>&emsp;&emsp;  俗话说的好，劳动人民的智慧是伟大的。<br>&emsp;&emsp;  我想我们是最不擅长守株待兔，不，是坐以待毙的种人吧，终于在一个夜晚，初春的夜晚，两个人想了又想，看了又看。<br>&emsp;&emsp;  你说，要不出去试试看？<br>&emsp;&emsp;  我说，好啊。<br>&emsp;&emsp;  烟花三月去哪里？<br>&emsp;&emsp;  那就…去<strong>京城</strong>吧。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic1.JPG" alt="mark"></p><hr><h2 id="Sealed-With-A-Kiss"><a href="#Sealed-With-A-Kiss" class="headerlink" title="Sealed With A Kiss"></a>Sealed With A Kiss</h2><p>&emsp;&emsp;  我的征途，是星辰大海。<br>&emsp;&emsp;  上面那句话是我离开天津的时候最后一条朋友圈，那个时候我心怀大志，也是被拒了太多次，想要急于证明自己的话吧，<br>勾践卧薪尝胆，我没有苦胆可以常，反倒是有一个对自己不离不弃的姑娘陪着我，我想我是幸福的，我想我们也终是会幸福的。<br>&emsp;&emsp;  很快便进入了初夏，天气一点点的热了起来，我的心也慢慢的燥了起来。<br>&emsp;&emsp;  有幸你能心里念着我，來北京几次，大概，人生中最幸福的那种时光不外乎如此，一个人在陌生的城市，却总能见到最爱的人，这下，连我自己也不敢说我的青春很惨了。<br>&emsp;&emsp;  但是，重逢总是伴随着离去，巨大的幸福，当然伴随着巨大的失落。<br>&emsp;&emsp;  亲爱的，把你送出北京的时候，我想，我哭了…    </p><p><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic9.JPG" alt="mark"></p><p>&emsp;&emsp;  离开火车站的时候，我狠狠的想，这辈子，老子绝对不要体验第二次异地恋！<br>&emsp;&emsp;  不知道我们彼此去看了多少次对方，但是火车票我都留着，已经数不清多少张了，就是这样的车票：<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic6.png" alt="mark"><br>&emsp;&emsp;  那时候住在北京的回龙观，同北京无数的小青年一样，都在努力的生存着，回龙观那边距北京南站有近两个小时的车程，所以，真的就是<br>&emsp;&emsp;  穿过一座京城来看你。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic7.png" alt="mark"> </p><hr><h2 id="行歌"><a href="#行歌" class="headerlink" title="行歌"></a>行歌</h2><p>&emsp;&emsp;  记得那个仲夏的夜晚，披星戴月的我回到了天津工大，原因只有一个，我要毕业了。<br>&emsp;&emsp;  挥一挥衣袖，告别了我们青春最后的时光，也看到了我们青春最后的样子。<br>&emsp;&emsp;  临毕业之前，因为毕业设计的缘故，我也回了学校很多次，感受着离开了几个月的校园，那个时候突然感到了很不适应，说的准确一点是无所适从，习惯了不会断电，习惯了外面的高额饭菜，习惯了省水省电，回来，真的有点陌生。<br>&emsp;&emsp;  后来发现，陌生的不是校园，是我，从离开北京的那个时间起，我就摆脱了学生这个称呼，这么说，我岂不是老牛吃嫩草，把你给吃了。<br>&emsp;&emsp;  那段时间仔仔细细的又和你走了一遍校园，拿着拍立得，到处拍下照片，拍到的好看的照片全部被我拿走了（很不好意思的是，在北京搬家的时候弄丢了几张），我们一边感叹着时间的飞快，一面面对着未来充满忐忑。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic15.JPG" alt="mark"></p><p>&emsp;&emsp;  不过我们能确定的是，没什么能把我们分开。<br>&emsp;&emsp;  那是我们在一起的第四个年头，也是我们上大学的第四年。  </p><p>&emsp;&emsp;  我很荣幸<br>&emsp;&emsp;  有你陪伴着我<br>&emsp;&emsp;  度过了<br>&emsp;&emsp;  人生中<br>&emsp;&emsp;  最美好<br>&emsp;&emsp;  的那四年。    </p><p>&emsp;&emsp;  也很庆幸四年的结果不是悲伤的，我们没有为青春的逝去而感到悲伤满怀，也没有因为一次次的矛盾而弃对方而去。<br>&emsp;&emsp;  虽然我们也会开始满怀心事，也会绕过从前的轻狂，不在大声欢笑大声哭泣。<br>&emsp;&emsp;  毕竟，万物生长，你我怎么会长不大？<br>&emsp;&emsp;  毕业季，来了。<br>&emsp;&emsp;   我们，还在一起。  </p><hr><h2 id="前前前前世"><a href="#前前前前世" class="headerlink" title="前前前前世"></a>前前前前世</h2><p>&emsp;&emsp;  毕业季，走了。<br>&emsp;&emsp;  我在北京也算是正式落定了，我想我们两个九九八十一难，算是该走向一个不错的方向了吧。<br>&emsp;&emsp;  开始了工作的我，每天上下班大概一共需要三个小时，从四惠，到回龙观东大街，中间要历经霍营，永泰庄，北土城，南锣鼓巷，还有什么站我也给忘了。<br>&emsp;&emsp;  就像立花泷一样，开始在一个偌大的北京城开始我的足迹，当然，我没有立花泷那样帅，他在的东京也跟我的北京不一样，起码，东京没有霾。<br>&emsp;&emsp;  我们两个，也正式进入了下一个阶段，得考虑以后的日子了，以后的什么日子呢？当然，就是以后的日子啦。<br>&emsp;&emsp;  以后的日子就是，谈！婚！论！嫁！<br>&emsp;&emsp;  对，我们开始计划着见家长，计划着什么时候买房子。计划着什么时候开始真正有我们自己的生活。<br>&emsp;&emsp;  生活踏入正轨的好处就是终于不在过着动荡不安的日子。<br>&emsp;&emsp;  终于再某个风和日丽的中秋节，我去见了你的父母，对我很好的两个长辈。<br>&emsp;&emsp;  同样再某个秋高气爽的十月一，你来到了我的故乡，见到我的父母，两个对你很好的长辈。<br>&emsp;&emsp;  我从来没有想过能把你领到我曾经生活了十几年的小城市，去走一走我走过无数遍的路，我上下学走了无数遍的路，去见一见跟我认识十几年的朋友。<br>&emsp;&emsp;  世界就是这么奇妙，我们曾不被任何人看好，我们曾被很多人打击，可是我们就是这么过来了，见到了双方的家长，定下了我们约定一生的约定。<br>&emsp;&emsp;  虽然一切都像是很顺利的模样，可是中间是是非曲直，你是明白的吧。 </p><p><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic11.JPG" alt="mark"></p><hr><h2 id="天津不太热"><a href="#天津不太热" class="headerlink" title="天津不太热"></a>天津不太热</h2><p>&emsp;&emsp;  经历了这么多之后，生活似乎觉得我们还是太顺利了，终归是给我出了个大难题。<br>&emsp;&emsp;  在北京的公司倒闭了，我想我又一次遇到了危机。。。<br>&emsp;&emsp;  没有工作的日子很难过，经常的就是一下午的发呆，努力去找工作，努力去放松自己，总是会想着，怎么会这样。<br>&emsp;&emsp;  在艰难的日子里面，生活总是喜欢给你没事找点事，例如，姥爷病逝了…<br>&emsp;&emsp;  凌晨三点得到的消息，走了，不知道该怎么说，你很担心我，甚至一度要求跟我一起回家，真的，心里很安心。<br>&emsp;&emsp;  未来的一段日子，我都再浑浑噩噩的度过，不知道该怎么办，不知道能不能撑得起來。<br>&emsp;&emsp;  亲爱的，感谢你在我最难过的时候支撑着我，度过每一个日日夜夜。<br>&emsp;&emsp;  既然，北京不留爷，爷就走吧。<br>&emsp;&emsp;  同样挥一挥衣袖，不留一丝痕迹，告别窄小的出租屋，告别3小时的上下班，亲爱的北京，你最后用你的大霾天给我留下了一个深情的吻别。<br>&emsp;&emsp;  北京太热，五月流火，我该去哪里？<br>&emsp;&emsp;  你说，回来吧。<br>&emsp;&emsp;  我说，好。<br>&emsp;&emsp;  夏时梦长，梦长自然要你在身旁。<br>&emsp;&emsp;  时隔一年零两个月，我又回来了。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic16.png" alt="mark"> </p><hr><h2 id="穿过一座京城来看你-1"><a href="#穿过一座京城来看你-1" class="headerlink" title="穿过一座京城来看你"></a>穿过一座京城来看你</h2><p>&emsp;&emsp;  來到熟悉的天津的时候，我还是很不适应，不过，生活倒是容易多了。<br>&emsp;&emsp;  一周一次的固定见面，再也没有那种舟车劳顿的奔波感。<br>&emsp;&emsp;  终于在一次偶然的面试，我找到了合适的工作，幸不辱命。<br>&emsp;&emsp;  在拿到offer的那个时候，我终于心里面释然了，我终于没有让你和你们失望。<br>&emsp;&emsp;  经几场圆滑换锋芒。  </p><p><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic17.JPG" alt="mark"></p><p>&emsp;&emsp;  说了太多我自己了，以至于我都忘记了我们的感情是什么时候开始变得更加牢固，更加让我们分不开。<br>&emsp;&emsp;  也许是我们一起努力学习的时候，也许是我们一起算计这个月还有多少积蓄的时候，又或者我们研究什么假期有空回家的时候。<br>&emsp;&emsp;  很多逝去都是轻描淡写的过去了，但是我知道，心里刻上的痕迹才不会那么轻易抹平。<br>&emsp;&emsp;  烟花三月去京城，五月流火回天津。<br>&emsp;&emsp;  <strong>我终于，穿过一整座京城，回到了你身边。</strong><br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-04/pic18.JPG" alt="mark"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;  其实我想说的MarkDown语法编辑器真的很难用，好不容自己搭了个博客，却要用MD來写着文章。表示很难受。</p><p>&emsp;&emsp;<strong>谨以此文章献给跟了我整整五年的杨丹小姐，感谢你的付出，希望日后我们能够更加相亲相爱， 不离不弃。</strong>  </p><p>&emsp;&emsp;  以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;穿过一座京城来看你&quot;&gt;&lt;a href=&quot;#穿过一座京城来看你&quot; class=&quot;headerlink&quot; title=&quot;穿过一座京城来看你&quot;&gt;&lt;/a&gt;穿过一座京城来看你&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;  一直想把那封信给你写完，却总是有各种各样的事情阻挡着，后来发现了，阻挡的事情叫做懒。&lt;br&gt;&amp;emsp;&amp;emsp;  时光飞快，这已经是我们在一起的第五个年头了，1825个日日夜夜，截至到我写这个文字为止，&lt;br&gt;是我们在一起第 1825 天 02 小时 38 分钟 39 秒。&lt;br&gt;&amp;emsp;&amp;emsp;  So..该从哪里说起呢？&lt;br&gt;
    
    </summary>
    
      <category term="New Life" scheme="http://www.qingheyang.studio:1314/categories/New-Life/"/>
    
    
      <category term="生活" scheme="http://www.qingheyang.studio:1314/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>远离CSDN，远离简书</title>
    <link href="http://www.qingheyang.studio:1314/2018/01/01/%E8%BF%9C%E7%A6%BBCSDN%EF%BC%8C%E8%BF%9C%E7%A6%BB%E7%AE%80%E4%B9%A6/"/>
    <id>http://www.qingheyang.studio:1314/2018/01/01/远离CSDN，远离简书/</id>
    <published>2018-01-01T14:06:00.000Z</published>
    <updated>2019-04-12T03:43:00.354Z</updated>
    
    <content type="html"><![CDATA[<p>终于建立了自己的小站啦，鄙站不大，但是总算是一段时间的技术总结。<br>最近也发布了第一篇文章，今天调整了下样式结构，感觉还是蛮开心的。<br>总之呢，也算是做到了当初的一个小愿望了吧。<br><a id="more"></a><br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-01/pic1.png" alt="mark"><br>感谢我强力的技术支持，国哥，帮我完成一系列的自动化运维推送脚本。<br><img src="http://www.qingheyang.studio:8000/blog_image/2018-01-01/pic2.JPG" alt="mark">  </p><p>想想后来，我也会加上评论功能吧，现在的评论功能都太弱鸡了，必须要github账号，实在是不太好弄。  </p><p>感谢您能抽出时间阅读我的博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于建立了自己的小站啦，鄙站不大，但是总算是一段时间的技术总结。&lt;br&gt;最近也发布了第一篇文章，今天调整了下样式结构，感觉还是蛮开心的。&lt;br&gt;总之呢，也算是做到了当初的一个小愿望了吧。&lt;br&gt;
    
    </summary>
    
      <category term="New Life" scheme="http://www.qingheyang.studio:1314/categories/New-Life/"/>
    
    
      <category term="my life" scheme="http://www.qingheyang.studio:1314/tags/my-life/"/>
    
  </entry>
  
</feed>
